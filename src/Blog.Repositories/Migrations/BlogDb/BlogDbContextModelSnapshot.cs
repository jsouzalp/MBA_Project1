// <auto-generated />
using System;
using Blog.Repositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.Repositories.Migrations.BlogDb
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("Blog.Entities.Authors.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<Guid>("IdentityUser")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("IDENTITY_USER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("Varchar")
                        .HasColumnName("NAME");

                    b.HasKey("Id")
                        .HasName("PK_TB_AUTHOR");

                    b.ToTable("TB_AUTHOR", (string)null);
                });

            modelBuilder.Entity("Blog.Entities.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("COMMENT_ID");

                    b.Property<Guid>("CommentAuthorId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("COMENT_AUTHOR_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DateTime")
                        .HasColumnName("DATE");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("Varchar")
                        .HasColumnName("MESSAGE");

                    b.Property<Guid>("PostId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("POST_ID");

                    b.HasKey("Id");

                    b.HasIndex("CommentAuthorId")
                        .HasDatabaseName("IDX_TB_COMMENT_02");

                    b.HasIndex("Date")
                        .HasDatabaseName("IDX_TB_COMMENT_03");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IDX_TB_COMMENT_01");

                    b.ToTable("TB_COMMENT", (string)null);
                });

            modelBuilder.Entity("Blog.Entities.Posts.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("POST_ID");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DateTime")
                        .HasColumnName("DATE");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("Varchar")
                        .HasColumnName("MESSAGE");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Varchar")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("IDX_TB_POST_01");

                    b.HasIndex("Date")
                        .HasDatabaseName("IDX_TB_POST_02");

                    b.ToTable("TB_POST", (string)null);
                });

            modelBuilder.Entity("Blog.Entities.Comments.Comment", b =>
                {
                    b.HasOne("Blog.Entities.Authors.Author", "CommentAuthor")
                        .WithMany("Comments")
                        .HasForeignKey("CommentAuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TB_COMMENT_002");

                    b.HasOne("Blog.Entities.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TB_COMMENT_001");

                    b.Navigation("CommentAuthor");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Blog.Entities.Posts.Post", b =>
                {
                    b.HasOne("Blog.Entities.Authors.Author", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TB_POST_002");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Blog.Entities.Authors.Author", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Blog.Entities.Posts.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
